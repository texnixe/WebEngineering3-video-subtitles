0
00:00:08,522 --> 00:00:12,022
Welcome to the last chapter of Web Engineering 3: "QA Deployment Pipeline"

1
00:00:13,322 --> 00:00:26,602
At the end of this chapter you will have learned how to build such a pipeline locally

2
00:00:26,852 --> 00:00:36,282
and which stages and jobs in these stages are important for quality assurance.

3
00:00:36,532 --> 00:00:46,882
I will give you a brief outline in this unit, the details will be explained in the following units.

4
00:00:47,132 --> 00:01:02,482
Each commit into the source code version control system triggers a build process and the corresponding unit tests will be executed.

5
00:01:02,732 --> 00:01:12,322
When the build process was successful, several quality assurance steps will be run.

6
00:01:12,572 --> 00:01:16,072
At the end of this process, the quality assured software will be deployed.

7
00:01:16,322 --> 00:01:22,802
All these steps can be freely defined for your project.

8
00:01:23,052 --> 00:01:38,202
Finally, a smoke test is run to make sure that the software runs as expected.

9
00:01:38,452 --> 00:01:47,562
We will have a closer look at some of these quality assurance stages and the respective tools.

10
00:01:47,812 --> 00:01:57,402
e.g. GUI tests, i.e. acceptance tests (remember the automation pyramid).

11
00:01:57,652 --> 00:02:07,002
Many projects are not tested on lower levels by rely on the final functional test.

12
00:02:07,252 --> 00:02:21,522
Non-functional quality tests can be performed in parallel (even if the diagram shows them sequentially).

13
00:02:21,772 --> 00:02:37,762
e.g. performance tests with Apache JMeter, security tests, WAI tests (accessibility tests), usability tests etc. 

14
00:02:38,012 --> 00:02:51,602
Either in parallel or subsequently, a static analysis of the source code is performed, and an API documentation is automatically generated.

15
00:02:51,852 --> 00:02:59,362
For this analysis we will use the tool SonarQube and have a brief look at it.

16
00:02:59,612 --> 00:03:10,802
However, we cannot explain all the metrics of quality code within the framework of this course.

17
00:03:11,052 --> 00:03:20,482
At the end of this chapter you will have built such a pipeline for your project.

18
00:03:20,732 --> 00:03:24,232


19
00:03:20,732 --> 00:03:38,082
As a UML sequence diagram (UML = Unified Modeling Language), the QA deployment pipeline is as follows:

20
00:03:38,332 --> 00:03:46,402
As you will know if you study software engineering seriously the sequence diagram is structured as follows:

21
00:03:46,652 --> 00:03:58,482
At the top, there are objects that trigger actions when activated - these actions are represented as little boxes .

22
00:03:58,732 --> 00:04:16,522
Atypically, we have two time axes: 
The lifeline of an object on the y-axis and the time of the transactions on the x-axis.

23
00:04:16,772 --> 00:04:44,682


24
00:04:44,932 --> 00:05:08,562
Here, the stages are represented as software classes: version control, build and unit tests, automated acceptance tests etc.

25
00:05:08,812 --> 00:05:16,682
The developer commits code changes into the version control system.

26
00:05:16,932 --> 00:05:20,432
This process triggers the first stage in which the software is build

27
00:05:20,682 --> 00:05:30,562
and all unit tests are run.

28
00:05:30,812 --> 00:05:39,482
If a unit test fails (represented by a red box), the developer receives feedback about the failure.

29
00:05:39,732 --> 00:05:47,562
Feedback can be given via different channels, one possibility is via email - KQC opens email tool.

30
00:05:47,812 --> 00:06:03,122
This is an example feedback mail from the Open Source platform Travis CI which we will also use in this chapter.

31
00:06:03,372 --> 00:06:20,882
In the example on the left, the build was successful; on the right the developer is informed of a failure, the build was not successful.

32
00:06:21,132 --> 00:06:33,322


33
00:06:33,572 --> 00:06:37,072


34
00:06:37,322 --> 00:06:51,562
If the build process is successful the next stage in the pipeline is triggered, in this case the acceptance tests.

35
00:06:51,812 --> 00:06:58,602
If the acceptance tests fails, the developer/developer team gets feedback again.

36
00:06:58,852 --> 00:07:15,962
If this stage is successful, the next stage is triggered. Here, the trigger is manual, i.e. a person has to approve it.

37
00:07:16,212 --> 00:07:30,842
In this example, a person will test the user interface and check if it behaves as expected.

38
00:07:31,092 --> 00:07:50,482
If the QA build pipeline is passed successfully, a new release is ready for deployment.

39
00:07:50,732 --> 00:08:01,082
The QA pipeline as described here represents the learning objectives of this course.

40
00:08:01,332 --> 00:08:05,642
What are the learning objectives?

41
00:08:05,892 --> 00:08:08,722


42
00:08:08,972 --> 00:08:17,162
You will learn how to design and implement such a  QA deployment pipeline.

43
00:08:17,412 --> 00:08:36,162
Designing means, identifying the stages and jobs that are relevant for your project and create the architecture of this deployment pipeline.

44
00:08:36,412 --> 00:08:55,482
Using the examples of ARSnova and THMCards, you will experience that a commit will indeed trigger this pipeline and 

45
00:08:55,732 --> 00:09:02,522
that - ideally - a single commit can result in a new release.

46
00:09:02,772 --> 00:09:12,682
All this we will study and implement using the de facto industry standard Jenkins.

47
00:09:12,932 --> 00:10:27,722
To make sure that the public build in the cloud is always functional and avoid "Who broke the build?" problems, a local Private Build is implemented. When the pipeline is passed locally, you can be sure that this will also be the case in the public build.

48
00:10:27,972 --> 00:10:53,802
We will inspect the results of the static code analysis with SonarQube to see what is important (keyword: technical debt).

49
00:10:54,052 --> 00:11:00,162
Homework Assignment #3:

50
00:11:00,412 --> 00:11:14,802
Your task is to implement a private QA Deployment Pipeline for your own web app project.

51
00:11:15,052 --> 00:11:26,042
Or, if you do not have your own project - it must be open source and publicly accessible in Github - you may use THMCards.

52
00:11:26,292 --> 00:11:57,522
As prove of your implementation, you have to submit a screenshot of your QA deployment pipeline and the URL of the web app project released via your QA pipeline.

53
00:11:57,772 --> 00:12:11,402
The deadline for submission of this homework and for the semester project is August 3, 2014, 23:59 CEST.

54
00:12:11,652 --> 00:12:44,442
The semester project basically consists of this homework plus parts of previous homework assignments plus a build pipeline created in the cloud with the Open Source platform Travis CI and a browser testing platform called Sauce Labs Open Sauce.

55
00:12:44,692 --> 00:12:48,192


56
00:12:48,442 --> 00:12:55,882
Here is a screenshot that shows an example pipeline:

57
00:12:56,132 --> 00:13:01,082
This screenshot is taken from the documentation of the plugin.

58
00:13:01,332 --> 00:13:10,482
The build process can be started manually.

59
00:13:10,732 --> 00:13:14,682
Here, the 8th build.

60
00:13:14,932 --> 00:13:27,682
The information in the green "Test" box shows the person who triggered the test, the date and the runtime. By clicking on the button, you can open the log.

61
00:13:27,932 --> 00:13:36,882
You can also trigger the build directly within the individual stages in this case.

62
00:13:37,132 --> 00:13:54,362
Here, you see two stages in parallel: the green one has passed, red would be a fail, and the yellow one is still running, i.e. it is unstable, there is also a progress indicator.

63
00:13:54,612 --> 00:13:58,112
You could click on it to see it in detail.

64
00:13:58,362 --> 00:14:09,562
The blue stages are waiting for execution, deployment into a pre-stage environment and manual approval for production.

65
00:14:09,812 --> 00:14:17,122
The history of all builds is shown on the vertical line.

